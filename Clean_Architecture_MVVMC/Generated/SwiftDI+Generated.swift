// this code is autogenerated, do not modify!

import Swinject

extension Resolver {

    func resolveAuthenticationRepositoryImpl() -> AuthenticationRepositoryImpl {
        return self.resolve(AuthenticationRepository.self) as! AuthenticationRepositoryImpl
    }

    func resolveLoginUserUseCase() -> LoginUserUseCase {
        return self.resolve(LoginUserUseCase.self)!
    }

    func resolveGetUserSessionStatusUseCase() -> GetUserSessionStatusUseCase {
        return self.resolve(GetUserSessionStatusUseCase.self)!
    }

    func resolveAppViewModel() -> AppViewModel {
        return self.resolve(AppViewModel.self)!
    }

    func resolveLoginViewModel() -> LoginViewModel {
        return self.resolve(LoginViewModel.self)!
    }
}

extension Container {

    @discardableResult func registerAuthenticationRepositoryImpl(registerClosure: @escaping (_ resolver: Resolver) -> (AuthenticationRepositoryImpl)) -> ServiceEntry<AuthenticationRepository> {
        return self.register(AuthenticationRepository.self, factory: registerClosure)
    }

    @discardableResult func registerLoginUserUseCase(registerClosure: @escaping (_ resolver: Resolver) -> (LoginUserUseCase)) -> ServiceEntry<LoginUserUseCase> {
        return self.register(LoginUserUseCase.self, factory: registerClosure)
    }

    @discardableResult func registerGetUserSessionStatusUseCase(registerClosure: @escaping (_ resolver: Resolver) -> (GetUserSessionStatusUseCase)) -> ServiceEntry<GetUserSessionStatusUseCase> {
        return self.register(GetUserSessionStatusUseCase.self, factory: registerClosure)
    }

    @discardableResult func registerAppViewModel(registerClosure: @escaping (_ resolver: Resolver) -> (AppViewModel)) -> ServiceEntry<AppViewModel> {
        return self.register(AppViewModel.self, factory: registerClosure)
    }

    @discardableResult func registerLoginViewModel(registerClosure: @escaping (_ resolver: Resolver) -> (LoginViewModel)) -> ServiceEntry<LoginViewModel> {
        return self.register(LoginViewModel.self, factory: registerClosure)
    }
}
